% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/granges_overlap.R
\name{granges_overlap}
\alias{granges_overlap}
\title{compare the percent overlap between two granges}
\usage{
granges_overlap(
  a_gr,
  b_gr,
  minOverlap = 0,
  olap_direction = "a",
  return_type = "pairs",
  verbose = TRUE
)
}
\arguments{
\item{a_gr}{Granges object}

\item{b_gr}{Granges object to compare with a_gr}

\item{minOverlap}{minimum required overlap of the region width in a_gr, value between 0-1 indicating the fraction that should overlap (0=minimum 1bp overlap is sufficient, 0.5 = at least 50\% of the width should overlap, 1=complete region must overlap)}

\item{olap_direction}{Direction for which minOverlap is applied. Should regions in a_gr have minOverlap with regions in b_gr (choose 'a'), vice versa ('b'), in both directions ('both') or any direction is fine ('any')}

\item{return_type}{Should a data.frame with pairs of overlapping regions in a_gr and b_gr ('pairs'), a logical vector indicating regions in a_gr with minOverlap in b_gr ('logical'), a vector of the region strings from a_gr with minOverlap with b_gr ('strings') be returned, or a message summarizing the percentage overlap be returned}
}
\value{
Depending on \code{return_type} returns a data.frame, logical or character vector, or just a message
}
\description{
returns the regions in a_gr that have at least minOverlap with the regions in b_gr (other width of overlap comparisons can be achieved by setting \code{olap_direction}
as well as the percentage of a_gr that overlaps b_gr
}
\examples{
#example1: generate random granges 
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene
gr1 = random_granges(n = 20000, txdb = txdb, chroms = 'chrY', width = pmax(1, as.integer(rnorm(20000, mean = 300, sd = 30))))
gr2 = random_granges(n = 5000, txdb = txdb, chroms = 'chrY', width = pmax(1, as.integer(rnorm(5000, mean = 500, sd = 100))))

#get the overlap percentage summarized
granges_overlap(a_gr = gr1, b_gr = gr2, minOverlap = 0.4, olap_direction = 'a', return_type = 'message', verbose = F)
granges_overlap(a_gr = gr1, b_gr = gr2, minOverlap = 0.4, olap_direction = 'both', return_type = 'message', verbose = F)
granges_overlap(a_gr = gr1, b_gr = gr2, minOverlap = 0.4, olap_direction = 'any', return_type = 'message', verbose = F)
#get the matched regions in a_gr and b_gr as a data.frame
granges_overlap(a_gr = gr1, b_gr = gr2, minOverlap = 0.4, olap_direction = 'any')
granges_overlap(a_gr = gr1, b_gr = gr2, minOverlap = 0.4, olap_direction = 'both', verbose = F)
#return as logical vector that can be used to subset a_gr
granges_overlap(a_gr = gr1, b_gr = gr2, minOverlap = 0.4, olap_direction = 'both',return_type = 'logical', verbose = F)
#or directly return a_gr regions as region strings
granges_overlap(a_gr = gr1, b_gr = gr2, minOverlap = 0.4, olap_direction = 'both',return_type = 'strings', verbose = F)

#example2: calculate overlap of hic regions with atac regions
hic_gr <- GRanges(Rle(c("chr1", "chr1", "chrX")),
                  IRanges(start = c(3, 22, 1), end=c(5, 25, 10)),
                  name= paste0('hic_', 1:3))
names(hic_gr) = hic_gr$name
atac_gr <- GRanges(Rle("chr1", 5),
                   IRanges(start = c(4,5,10,20,25), end=c(30,8,22,24,27)),
                   name = paste0('atac_', 1:5))
names(atac_gr) = atac_gr$name

#3 atac regions have minimum overlap of 20\% of their length with a hic region
granges_overlap(a_gr = atac_gr,
                b_gr = hic_gr,
                minOverlap = 0.2,
                olap_direction = 'a')

#visualize the result (only looking at region on chromosome 1)
plot_granges_overlap(a_gr = atac_gr, 
              b_gr = hic_gr, 
              region_gr = Signac::StringToGRanges('chr1-1-100'),
              minOverlap = 0.2,
              olap_direction = 'a')
}
